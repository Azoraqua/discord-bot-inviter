{"version":3,"sources":["App.js","index.js"],"names":["App","enqueueSnackbar","useSnackbar","PERMISSIONS","general","id","name","permission","tfa","critical","text","voice","internalize","toLowerCase","replace","handleSubmit","e","preventDefault","document","getElementById","value","permissions","querySelectorAll","forEach","o","c","children","flat","find","p","calculatePermissions","variant","style","textAlign","Typography","color","Link","href","marginTop","noValidate","autoComplete","onSubmit","FormGroup","TextField","placeholder","display","justifyContent","margin","map","FormControlLabel","className","control","Checkbox","data-permission","label","Badge","transform","title","marginBottom","Button","type","IntegrationNotistack","maxSnack","ReactDOM","render"],"mappings":"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","file":"static/js/main.c44f7713.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport {SnackbarProvider, useSnackbar} from \"notistack\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ErrorIcon from '@material-ui/icons/Error';\n\nconst DISCORD_AUTH_URL = \"https://discord.com/oauth2/authorize?client_id={CLIENT_ID}&scope=bot&permissions={PERMISSIONS}\";\n\nfunction App() {\n    const {enqueueSnackbar} = useSnackbar();\n\n    const PERMISSIONS = {\n        general: [\n            {id: 'p_administrator', name: 'Administrator', permission: 0x8, tfa: true, critical: true},\n            {id: 'p_audit_log', name: 'View Audit Log', permission: 0x80},\n            {id: 'p_server_insights', name: 'View Server Insights', permission: 0x80000},\n            {id: 'p_manage_server', name: 'Manage Server', permission: 0x20, tfa: true},\n            {id: 'p_manage_roles', name: 'Manage Roles', permission: 0x10000000, tfa: true},\n            {id: 'p_manage_channels', name: 'Manage Channels', permission: 0x10, tfa: true},\n            {id: 'p_kick_members', name: 'Kick Members', permission: 0x2, tfa: true},\n            {id: 'p_ban_members', name: 'Ban Members', permission: 0x4, tfa: true},\n            {id: 'p_manage_nicknames', name: 'Manage Nicknames', permission: 0x8000000},\n            {id: 'p_manage_emojis', name: 'Manage Emojis', permission: 0x40000000},\n            {id: 'p_manage_webhooks', name: 'Manage Webhooks', permission: 0x20000000, tfa: true},\n        ],\n\n        text: [\n            {id: 'p_manage_messages', name: 'Manage Messages', permission: 0x2000, tfa: true},\n        ],\n\n        voice: []\n    };\n\n    function internalize(name) {\n        return name.toLowerCase().replace(' ', '_');\n    }\n\n    function calculatePermissions() {\n        let permissions = 0;\n        const options = [...document.querySelectorAll('.p-option')];\n\n        options.forEach(o => {\n            const c = o.children[0].children[0];\n            const permission = PERMISSIONS.flat().find(p => p.id === c.id);\n\n            permissions |= permission.permission;\n        });\n\n        return permissions;\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        const clientId = document.getElementById('client_id');\n\n        if (clientId.value === '') {\n            enqueueSnackbar('Client ID is invalid.', {variant: 'error'});\n            return;\n        }\n\n        const permissions = calculatePermissions();\n\n        if (permissions <= 0) {\n            enqueueSnackbar('No permissions selected.', {variant: 'error'});\n            return;\n        }\n\n        // window.location.href = DISCORD_AUTH_URL.replace('{CLIENT_ID}', clientId.value).replace('{PERMISSIONS}', permissions.toString());\n    }\n\n    return (\n        <>\n            <div>\n                <header style={{textAlign: \"center\"}}>\n                    <Typography variant={\"h5\"} color={\"secondary\"}>Discord Bot Inviter</Typography>\n                    <Typography variant={\"body1\"} style={{color: '#ddd'}}>by <Link href={'https://github.com/Azoraqua'}\n                                                                                   color={\"primary\"}>Azoraqua</Link></Typography>\n                </header>\n\n                <main style={{marginTop: '35px'}}>\n                    <form noValidate autoComplete=\"off\" onSubmit={e => handleSubmit(e)}>\n                        <fieldset style={{textAlign: \"center\"}}>\n                            <legend>Client ID</legend>\n\n                            <FormGroup>\n                                <TextField id=\"client_id\" placeholder={\"000000000000000\"} color={\"secondary\"}/>\n                            </FormGroup>\n                        </fieldset>\n\n                        <fieldset style={{\n                            textAlign: \"center\",\n                            marginTop: '20px',\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                        }}>\n                            <legend>Permissions</legend>\n\n                            <FormGroup style={{margin: '0 25px'}}>\n                                <Typography variant={\"caption\"} color={\"secondary\"}>General</Typography>\n\n                                {PERMISSIONS['general'].map(p => (\n                                    <FormControlLabel className={p.tfa ? 'tfa' : ''}\n                                                      key={`${p.id}`}\n                                                      control={<Checkbox id={`${internalize(p.id)}`}\n                                                                         name={`${internalize(p.id)}`}\n                                                                         data-permission={`${p.permission}`}\n                                                                         className={'p-option'}/>}\n                                                      label={<Typography variant={\"caption\"}>{p.name}{p.critical ? <Badge style={{ color: '#fff', transform: 'scale(0.60)'}} title={'Be careful when granting this permission because it will grant all permissions to the Discord Bot.'}><ErrorIcon /></Badge> : ''}</Typography>}\n                                    />\n                                ))}\n                            </FormGroup>\n\n                            <FormGroup style={{margin: '0 25px'}}>\n                                <Typography variant={\"caption\"} color={\"secondary\"}>Text</Typography>\n\n                                {PERMISSIONS['text'].map(p => (\n                                    <FormControlLabel className={p.tfa ? 'tfa' : ''}\n                                                      key={`${p.id}`}\n                                                      control={<Checkbox id={`${internalize(p.id)}`}\n                                                                         name={`${internalize(p.id)}`}\n                                                                         data-permission={`${p.permission}`}\n                                                                         className={'p-option'}/>}\n                                                      label={<Typography variant={\"caption\"}>{p.name}</Typography>}\n                                    />\n                                ))}\n                            </FormGroup>\n\n                            <FormGroup style={{margin: '0 25px'}}>\n                                <Typography variant={\"caption\"} color={\"secondary\"}>Voice</Typography>\n\n                                {PERMISSIONS['voice'].map(p => (\n                                    <FormControlLabel className={p.tfa ? 'tfa' : ''}\n                                                      key={`${p.id}`}\n                                                      control={<Checkbox id={`${internalize(p.id)}`}\n                                                                         name={`${internalize(p.id)}`}\n                                                                         data-permission={`${p.permission}`}\n                                                                         className={'p-option'}/>}\n                                                      label={<Typography variant={\"caption\"}>{p.name}</Typography>}\n                                    />\n                                ))}\n                            </FormGroup>\n                        </fieldset>\n\n                        <FormGroup style={{marginTop: '30px', marginBottom: '50px'}}>\n                            <Button type={\"submit\"} color={\"secondary\"}>Invite</Button>\n                        </FormGroup>\n                    </form>\n                </main>\n            </div>\n        </>\n    );\n}\n\nexport default function IntegrationNotistack() {\n    return (\n        <SnackbarProvider maxSnack={3}>\n            <App/>\n        </SnackbarProvider>\n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}